<?xml version="1.0" encoding="utf-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
<map:components>

  <map:generators default="file">
    <map:generator
      name="commandGenerator"
      src="org.xmlqstat.generator.CommandGenerator"
      >
      <expire>60</expire>
    </map:generator>
  </map:generators>

  <map:transformers default="xslt">
    <map:transformer name="xinclude"
      src="org.apache.cocoon.transformation.XIncludeTransformer"
      />
  </map:transformers>

  <map:readers default="resource" />

  <map:serializers default="xhtml">
    <!-- Our custom XHTML output serializer for Sony PSP browsers -->
    <map:serializer
      name="xhtml-psp"
      src="org.apache.cocoon.serialization.XMLSerializer"
      mime-type="text/html; charset=ISO-8859-1"
      >
      <omit-xml-declaration>yes</omit-xml-declaration>
      <omit-namespaces>yes</omit-namespaces>
      <encoding>UTF-8</encoding>
      <doctype-public>-//W3C//DTD XHTML 1.0 Strict//EN</doctype-public>
      <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</doctype-system>
    </map:serializer>

    <!-- ATOM 1.0 Feed Serialzer -->
    <map:serializer
      name="atom-xml"
      src="org.apache.cocoon.serialization.XMLSerializer"
      mime-type="application/atom+xml; charset=UTF-8"
      >
      <encoding>UTF-8</encoding>
    </map:serializer>
  </map:serializers>

  <map:selectors default="browser">
    <!-- Need to auto-detect MS and PSP browers -->
    <map:selector name="browser"
      src="org.apache.cocoon.selection.BrowserSelector"
      >
      <browser name="explorer" useragent="MSIE"/>
      <browser name="sonyPSP"  useragent="PlayStation Portable"/>
    </map:selector>

    <map:selector name="resource-exists"
      src="org.apache.cocoon.selection.ResourceExistsSelector"
      >
      <map:parameter src="prefix" value="/"/>
    </map:selector>

  </map:selectors>

  <map:matchers default="wildcard">
    <map:matcher name="regexp" src="org.apache.cocoon.matching.RegexpURIMatcher"/>
  </map:matchers>

</map:components>

<map:pipelines>
<!--
   | Setup all the sources (files or via the CommandGenerator) as
   | as cocoon:/{name}
   |   1) to allow easier administration
   |   2) to provide a means of viewing the xml files directly.
   |
   | Directly viewable xml also provides the possibility of collating
   | information from several clusters
   |
   | Decide yourself if you wish to use file caches or the CommandGenerator.
   | - The CommandGenerator is currently not caching properly and you may
   |   receive a "too many files open" error that requires a cocoon restart.
   -->
<map:pipeline internal-only="true">
  <!-- the site configuration file -->
  <map:match pattern="config">
    <map:generate  src="config/config.xml"/>
    <map:serialize type="xml"/>
  </map:match>

  <!-- use qhost.sh helper script instead of qhost directly
       this avoid the namespace problem:
       http://gridengine.sunsource.net/issues/show_bug.cgi?id=2515
  -->
  <map:match pattern="qhostCmd">
    <map:generate  type="commandGenerator" src="qhost.sh -xml -j -q" />
    <map:serialize type="xml"/>
  </map:match>

  <!--
     if we cache the qstat query from the qlicserver,
     we can reuse it instead of qstatCmd.
     This is highly advisable if the qlicserver is running anyhow.
  -->
  <map:match pattern="qstatFile">
    <map:generate  src="cache/qstat.xml"/>
    <map:serialize type="xml"/>
  </map:match>

  <!--
      The full qstat query traditionally used by xmlqstat and generated by the
      sge-xml-cacher.pl daemon.
      Use a symbolic link to point to the file generated by the daemon.

      If you are using the cached information instead of the CommandGenerator,
      search and replace qstatfCmd with qstatfFile below.
  -->
  <map:match pattern="qstatfFile">
    <map:generate  src="cache/qstatf.xml"/>
    <map:serialize type="xml"/>
  </map:match>

  <!-- Note:
     The sole purpose of using the 'qstat.sh' wrapper instead of 'qstat'
     is to log info to  /tmp/commandlog-qstat for DEBUGGING purposes
     eg, find out how well the cocoon cache is performing
     -->
  <map:match pattern="qstatCmd">
    <map:generate  type="commandGenerator" src="qstat.sh -u * -xml -r -s prs" />
    <map:serialize type="xml"/>
  </map:match>

  <!--
      The full qstat query traditionally used by xmlqstat and executed
      directly as a command. As of 2008-04-14, the caching was not working
      correctly. You are thus better advised to use the cached information
      (qstatfFile) listed below.
  -->
  <map:match pattern="qstatfCmd">
    <map:generate  type="commandGenerator" src="qstat.sh -u * -xml -r -f -explain aAcE" />
    <map:serialize type="xml"/>
  </map:match>


</map:pipeline>


<map:pipeline>

  <!-- let cocoon find our static files
       These are redirects:
       -->
  <map:match pattern="cluster/*/css/*.css">
    <map:read mime-type="text/css" src="css/{2}.css" />
  </map:match>
  <map:match pattern="cluster/*/javascript/*.js">
    <map:read mime-type="text/javascript" src="javascript/{2}.js" />
  </map:match>
  <map:match pattern="cluster/*/**/*.gif">
    <map:read mime-type="image/gif" src="{2}/{3}.gif" />
  </map:match>
  <map:match pattern="cluster/*/**/*.png">
    <map:read mime-type="image/png" src="{2}/{3}.png" />
  </map:match>
  <map:match pattern="cluster/*/**/*.jpg">
    <map:read mime-type="image/jpg" src="{2}/{3}.jpg" />
  </map:match>

  <!-- these are normal static files -->
  <map:match pattern="css/*.css">
    <map:read mime-type="text/css" src="css/{1}.css" />
  </map:match>
  <map:match pattern="javascript/*.js">
    <map:read mime-type="text/javascript" src="javascript/{1}.js" />
  </map:match>
  <map:match pattern="**/*.gif">
    <map:read mime-type="image/gif" src="{1}/{2}.gif" />
  </map:match>
  <map:match pattern="**/*.png">
    <map:read mime-type="image/png" src="{1}/{2}.png" />
  </map:match>
  <map:match pattern="**/*.jpg">
    <map:read mime-type="image/jpg" src="{1}/{2}.jpg" />
  </map:match>


  <!-- Catch & redirect people going to http://<server>/xmlqstat/
       Redirect to 'cluster' for the qlicserver integration
       Redirect to 'qstat-jobs.html' for the traditional "qstat -f" output
       -->
  <map:match pattern="">
    <map:redirect-to uri="cluster"/>
  </map:match>

  <!-- url: "/xmlqstat/cluster"
       index of clusters
  -->
  <map:match pattern="cluster">
    <map:generate  src="cocoon:/config" />
    <map:transform src="xsl/index-xhtml.xsl">
      <map:parameter name="timestamp" value="{date: yyyy-MM-dd_HH:mm:ss}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>


  <!-- url: "/xmlqstat/cluster/{name}"
       list cache files
  -->
  <map:match pattern="cluster/*">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:generate type="directory"  src="cache-{1}">
        <map:parameter name="depth"   value="1"/>
        <map:parameter name="include" value="\.xml$"/>
      </map:generate>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="parentDir" value="{1}"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/xmlqstat/cluster/{name}/jobinfo.xml?jobNumber"
       generate job details via second webserver (handles empty query strings)
       -->
  <map:match pattern="cluster/*/jobinfo.xml">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:generate  src="cocoon:/config"/>
      <map:transform src="xsl/jobinfo-query.xsl">
        <map:parameter name="cluster" value="{1}"/>
        <map:parameter name="query"   value="{request:queryString}"/>
      </map:transform>
      <map:transform type="xinclude"/>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xml" />
  </map:match>

  <!-- url: "/xmlqstat/cluster/{name}/*.xml"
       view cached xml files directly
       -->
  <map:match pattern="cluster/*/*.xml">
    <map:select type="resource-exists">
    <map:when test="cache-{1}/{2}.xml">
      <map:generate src="cache-{1}/{2}.xml"/>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xml"/>
  </map:match>


  <!-- url: "/xmlqstat/cluster/{name}/jobs"
       display running and pending jobs, optionally selected by user
       -->
  <map:match pattern="cluster/*/jobs">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <!-- <map:generate  src="cocoon:/qstatCmd"/> -->
      <map:aggregate element="aggregated">
        <map:part src="cache-{1}/qlicserver.xml"/>
        <map:part src="cache-{1}/qstat.xml"/>
      </map:aggregate>
      <map:transform src="xsl/qstat-xhtml.xsl">
        <map:parameter name="timestamp"       value="{date: yyyy-MM-dd_HH:mm:ss}"/>
        <map:parameter name="activeJobTable"  value="{cookie:activeJobTable}" />
        <map:parameter name="pendingJobTable" value="{cookie:pendingJobTable}" />
        <map:parameter name="filterByUser"    value="{request-param:user}"/>
      </map:transform>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/xmlqstat/cluster/{name}/queues?renderMode"
       display all the queue instances or just a summary
       -->
  <map:match pattern="cluster/*/queues">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:aggregate element="aggregated">
        <map:part src="cache-{1}/qlicserver.xml"/>
        <map:part src="cache-{1}/qhost.xml"/>
      </map:aggregate>
      <map:transform src="xsl/qhost-xhtml.xsl">
        <map:parameter name="timestamp"  value="{date: yyyy-MM-dd_HH:mm:ss}"/>
        <map:parameter name="renderMode" value="{request:queryString}" />
      </map:transform>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- redirect: "/xmlqstat/cluster/{name}/summary"
       to queues?summary
       -->
  <map:match pattern="cluster/*/summary">
    <map:redirect-to uri="queues?summary"/>
  </map:match>

  <!-- url: "/xmlqstat/cluster/{name}/resources"
       display the resource usage/availability (garnered by qlicserver)
       -->
  <map:match pattern="cluster/*/resources">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:generate  src="cache-{1}/qlicserver.xml" />
      <map:transform src="xsl/qlic-xhtml.xsl">
        <map:parameter name="timestamp"  value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      </map:transform>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/xmlqstat/cluster/{name}/jobinfo?jobNumber"
       generate job details via second webserver (handles empty query strings)
       -->
  <map:match pattern="cluster/*/jobinfo">
    <map:select type="resource-exists">
    <map:when test="cache-{1}">
      <map:generate  src="cocoon:/config"/>
      <map:transform src="xsl/jobinfo-query.xsl">
        <map:parameter name="cluster" value="{1}"/>
        <map:parameter name="query"   value="{request:queryString}"/>
      </map:transform>
      <map:transform type="xinclude"/>
      <map:transform src="xsl/qstatj-xhtml.xsl">
        <map:parameter name="timestamp" value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      </map:transform>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xhtml" />
  </map:match>

  <!-- fallback - catch errors -->
  <map:match pattern="cluster/**">
    <map:generate src="xml/notFound.xml"/>
    <map:serialize type="xml"/>
  </map:match>


  <!-- Catch & redirect people going to http://<server>/xmlqstat/psp/  -->
  <map:match pattern="psp/">
    <map:redirect-to uri="default.html"/>
  </map:match>

  <!-- Catch & redirect people going to http://<server>/xmlqstat/feed/  -->
  <map:match pattern="feed/">
    <map:redirect-to uri="overview"/>
  </map:match>

  <!-- intercept unsupported browsers and SonyPSP user-agents -->
  <map:match pattern="*">
    <map:select type="browser">
      <map:when test="explorer">
        <map:redirect-to uri="info/unsupported.html"/>
      </map:when>
      <map:otherwise>
      <!-- do nothing, continue flow -->
      </map:otherwise>
    </map:select>
  </map:match>


  <!-- documentation rendering for url path /info/ -->
  <map:match pattern="info/*.html">
    <map:generate  src="xml/info/{1}.xml" />
    <map:transform src="xsl/info-to-xhtml.xsl">
      <map:parameter name="timestamp"  value="{date: yyyy-MM-dd_HH:mm:ss}"/>
    </map:transform>
    <map:serialize type="xhtml" />
  </map:match>

  <!-- MOBILE PSP rendering for url path /psp/ -->
  <map:match pattern="psp/*.html">
    <map:generate  src="cocoon:/qstatfCmd" />
    <map:transform src="xsl/qstatf-psp.xsl">
      <map:parameter name="timestamp"  value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="renderMode" value="{1}"/>
    </map:transform>
    <map:serialize type="xhtml-psp"/>
  </map:match>

  <!-- atom xml feed.
       The timezone offset for the iso8601 timestamp from config/config.xml file
       The baseURL must be passed through
       -->
  <map:match pattern="feed/*">
    <map:generate  src="cocoon:/qstatfCmd" />
    <map:transform src="xsl/feed-atom-{1}.xsl">
      <map:parameter name="isoTimestamp" value="{date:yyyy-MM-dd'T'HH:mm:ss}"/>
      <map:parameter name="baseURL"
          value="http://{request:serverName}:{request:serverPort}/xmlqstat/"
      />
    </map:transform>
    <map:serialize type="atom-xml" />
  </map:match>

  <!-- url: "/xmlqstat/config"
       list config files
  -->
  <map:match pattern="config">
    <map:generate type="directory"  src="config">
      <map:parameter name="depth"   value="1"/>
      <map:parameter name="include" value="\.xml$"/>
    </map:generate>
    <map:transform src="xsl/directory-xhtml.xsl">
      <map:parameter name="parentDir" value="config"/>
    </map:transform>
    <map:serialize type="xhtml"/>
  </map:match>

  <!-- url: "/xmlqstat/config/*.xml"
       view xml config files directly
       -->
  <map:match pattern="config/*.xml">
    <map:select type="resource-exists">
    <map:when test="config/{1}.xml">
      <map:generate src="config/{1}.xml"/>
    </map:when>
    <map:otherwise>
      <map:generate src="xml/notFound.xml"/>
    </map:otherwise>
    </map:select>
    <map:serialize type="xml"/>
  </map:match>


  <!-- fallback - catch errors -->
  <map:match pattern="config/**">
    <map:generate src="xml/notFound.xml"/>
    <map:serialize type="xml"/>
  </map:match>

  <!-- url: "/xmlqstat/qstat.xml"
       view results from "qstat" command
       -->
  <map:match pattern="qstat.xml">
    <map:generate  src="cocoon:/qstatCmd"/>
    <map:serialize type="xml"/>
  </map:match>
  <!-- url: "/xmlqstat/qstatf.xml"
       view results from "qstat -f" command
       -->
  <map:match pattern="qstatf.xml">
    <map:generate  src="cocoon:/qstatfCmd"/>
    <map:serialize type="xml"/>
  </map:match>

  <!-- url: /xmlqstat/job-{jobNumber}.html
       job details rendered with xmlqstat navigation,
       cannot use queryString since it might be empty
  -->
  <map:match pattern="job-*.html">
    <map:generate  type="commandGenerator" src="qstat -xml -j {1}" />
    <map:transform src="xsl/qstatj-xhtml.xsl">
      <map:parameter name="timestamp" value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="menuMode"  value="xmlqstat"/>
    </map:transform>
    <map:serialize type="xhtml" />
  </map:match>

  <!-- url: "/xmlqstat/qstat-jobs.html?user"
       display running and pending jobs, optionally selected by user
       data gathered from "qstat -f", rendered with xmlqstat navigation
       -->
  <map:match pattern="qstat-jobs.html">
    <map:generate  src="cocoon:/qstatfCmd" />
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="timestamp"        value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="queueStatusTable" value="{cookie:queueStatusTable}" />
      <map:parameter name="activeJobTable"   value="{cookie:activeJobTable}" />
      <map:parameter name="pendingJobTable"  value="{cookie:pendingJobTable}" />
      <map:parameter name="filterByUser"     value="{request:queryString}" />
      <map:parameter name="menuMode"         value="xmlqstat"/>
    </map:transform>
    <map:serialize type="xhtml" />
  </map:match>

  <!-- url: "/xmlqstat/qstat-full.html"
       display all the queue instances
       data gathered from "qstat -f", rendered with xmlqstat navigation
  -->
  <map:match pattern="qstat-full.html">
    <map:generate  src="cocoon:/qstatfCmd" />
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="timestamp"        value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="queueStatusTable" value="{cookie:queueStatusTable}" />
      <map:parameter name="activeJobTable"   value="{cookie:activeJobTable}" />
      <map:parameter name="pendingJobTable"  value="{cookie:pendingJobTable}" />
      <map:parameter name="renderMode"       value="full" />
      <map:parameter name="menuMode"         value="xmlqstat"/>
    </map:transform>
    <map:serialize type="xhtml" />
  </map:match>

  <!-- url: "/xmlqstat/qstat-terse.html"
       a very terse summary of the queue status
       data gathered from "qstat -f", rendered with xmlqstat navigation
  -->
  <map:match pattern="qstat-terse.html">
    <map:generate  src="cocoon:/qstatfCmd" />
    <map:transform src="xsl/qstatf-xhtml.xsl">
      <map:parameter name="timestamp"        value="{date: yyyy-MM-dd_HH:mm:ss}"/>
      <map:parameter name="queueStatusTable" value="{cookie:queueStatusTable}" />
      <map:parameter name="activeJobTable"   value="{cookie:activeJobTable}" />
      <map:parameter name="pendingJobTable"  value="{cookie:pendingJobTable}" />
      <map:parameter name="renderMode"       value="terse" />
      <map:parameter name="menuMode"         value="xmlqstat"/>
    </map:transform>
    <map:serialize type="xhtml" />
  </map:match>

</map:pipeline>
</map:pipelines>
</map:sitemap>
