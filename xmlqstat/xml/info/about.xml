<?xml version='1.0'?>
<content>
<title>about xml-qstat</title>
<heading>About xml-qstat</heading>

<!-- section -->
<section>
<sectionHead>What is xml-qstat?</sectionHead>
<para><![CDATA[
xml-qstat is an attempt to do something useful with the XML status information
that GridEngine 6 <a href="http://gridengine.sunsource.net">(http://gridengine.sunsource.net</a>
&amp; <a href="http://sun.com/software/gridware/">http://www.sun.com/software/gridware/</a>)
is now able to produce. In previous attempts to build web based GridEngine
monitoring tools, the text based Grid status and monitoring tools were
crudely parsed and wrapped into simple web CGI's:
<div>
<a href="../images/screenshot/xmlqstat_011.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_011_thumb.png"/></a>
Yielded ...
<a href="../images/screenshot/xmlqstat_013.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_013_thumb.png"/></a>
</div>
]]></para>

<para>
At its heart, xml-qstat consists of a collection of stylesheets written in
XSL. The stylesheets can be used with a XSLT transformation engine to change
raw GridEngine XML data into convenient formats such as XHTML and RSS. Once
the grid data has been mapulated into XHTML we can then apply other web
technologies such as CSS, DHTML and Javascrip to create fairly sophisticated
web based tools for GridEngine status reporting and monitoring.
</para>
<para><![CDATA[
The current version of this software has been developed to run under the
<a href="http://cocoon.apache.org/2.1/">Apache Cocoon (2.1)</a> XML
publishing framework.
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>History</sectionHead>

<para><![CDATA[
This is a 3rd generation codebase of a project that was begun in mid-2005.
Early versions of this program used Xalan-C++
(<a href="http://xml.apache.org/xalan-c/">http://xml.apache.org/xalan-c/</a>)
but that package turned out to be difficult to build on various Linux and
Apple OS X systems.  The 2nd generation xml-qstat programs and CGIs used the
very nice Perl modules
<strong>XML::LibXML</strong> and <strong>XML::LibXSLT</strong>.
Those modules provided Perl intefaces to the Gnome Project's excellent
<strong>libxml2</strong> (<a href="http://www.xmlsoft.org">http://www.xmlsoft.org</a>/)
and <strong>libxslt</strong>
(<a href="http://xmlsoft.org/XSLT/">http://xmlsoft.org/XSLT/</a>)
code libraries. The 2nd generation code was abandoned when
<a href="http://cocoon.apache.org/2.1/">Apache Cocoon</a> was discovered
- the Cocoon framework functions out of the box on just about any Java
enabled system and there are no requirements to download and build various
dependent XML libraries and Perl modules.

<br/><br/>
This is what generation 2 (pure Perl) looked like:
<div><a href="../images/screenshot/Mozillaxml_qstat_001.jpg"><img border="0" alt="*" src="../images/screenshot/Mozillaxml_qstat_001.thumb.jpg"/></a>
<a href="../images/screenshot/Mozillaxml_qstat_002.jpg"><img border="0" alt="*" src="../images/screenshot/Mozillaxml_qstat_002.thumb.jpg"/></a>
</div>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Current Screenshots</sectionHead>
<para><![CDATA[
Current screenshots showing various features:
<div>
<a href="../images/screenshot/xmlqstat_001.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_001_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_002.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_002_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_006.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_006_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_007.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_007_thumb.png"/></a>
</div>

<div>
Detailed information is kept hidden to keep the initial interface clean.
Javascript and mouseover popups are used to present more detail when
requested:
<a href="../images/screenshot/xmlqstat_005.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_005_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_003.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_003_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_004.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_004_thumb.png"/></a>

</div>
<div>
Alternative rendered views include Atom 1.0 compliant syndication feeds as
well as specially formatted interfaces for Sony Playstation Portable
browsers:
<a href="../images/screenshot/xmlqstat_008.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_008_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_009.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_009_thumb.png"/></a>
<a href="../images/screenshot/xmlqstat_010.png"><img border="0" alt="*" src="../images/screenshot/xmlqstat_010_thumb.png"/></a>
<a href="../images/screenshot/psp-sge.jpg"><img border="0" alt="*" src="../images/screenshot/psp-sge_thumb.jpg"/></a>
</div>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Requirements</sectionHead>
<para><![CDATA[
The functional requirements are very basic.
Root level access to a system is not required.
Key dependencies include:
<ul>
<li>A recent version of Java</li>
<li>A recent version of Perl</li>
<li>Apache Cocoon version 2.1.8 or higher</li>
<li>GridEngine version 6.0u7 or higher (6.1u3 or later strongly encouraged)</li>
<li>Mozilla, Safari, Firefox, Konqueror or Opera web browser (Internet Explorer is not currently supported)</li>
</ul>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Package Overview</sectionHead>
<para><![CDATA[
The code is organized in the following manner:
<pre>
$ ls -l /opt/xml-qstat/
drwxr-xr-x    cocoon/
drwxr-xr-x    java/
drwxr-xr-x    httpi/
drwxr-xr-x    init-scripts/
drwxr-xr-x    scripts/
drwxr-xr-x    xmlqstat/
</pre>
The <b>cocoon/</b> directory is a standard Apache Cocoon installation.
The only file touched inside the cocoon directory is a customized
"mount-table.xml" configuration file that informs the application server
that the URI-prefix of "/xmlqstat/" should be handled by the "xmlqstat/"
directory.
<br/><br/>
The <b>java/</b> directory contains the
<em>CommandGenerator</em>
that can be used largely instead of file caching and may allows some users
to avoid a second webserver.
<br/><br/>

The <b>httpi/</b> directory is <em>optional</em> and contains a tiny, fast and
secure pure-Perl webserver known as
<a href="http://www.floodgap.com/httpi/">httpi</a>.

This webserver can be used to generate dynamic XML when the cached data
is unsuitable or if the user prefers not to use the pure-Java
<em>CommandGenerator</em>.

The original use of the second webserver was to service requests for
<b>job related</b> grid status data: When a user clicks on a JobID within
the web interface, cocoon will call upon httpi to run and return the
raw XML results from the <code>"qstat -j -xml"</code> query.
There remains, however, many other places in which the second webserver can
be of use. For example, to wrap existing system tools that don't have an xml
output, or to serve bitmap images of system loads, solution convergence,
etc. Also, see note below in the <b>jobinfo</b> description.

<br/><br/>
The <b>scripts/</b> directory currently contains 2 shell scripts and
3 Perl scripts.

<ol>
<li>
  The <b>qhost.sh</b> shell script is a quick fix for issue
  <a href="http://gridengine.sunsource.net/issues/show_bug.cgi?id=2515">2515</a>.
  Place it somewhere in your path to use instead of using qhost directly.
</li>
<li>
  The <b>qstat.sh</b> shell script contains a quick fix for issue
  <a href="http://gridengine.sunsource.net/issues/show_bug.cgi?id=3057">3057</a>,
  but more importantly it can process CELL and ROOT as initial command-line
  parameters, which are interpreted as SGE_CELL and SGE_ROOT, respectively.
  Place it somewhere in your path to use instead of using qhost directly.
</li>
<li>
  The <b>jobinfo</b> CGI script is an <em>optional</em> cgi script for
  processing the jod detail requests.
  It should be placed under the "/xmlqstat/" path of the second
  webserver. You can use curl to test that it is working properly:
  <pre>
     curl http://SERVER:PORT/xmlqstat/jobinfo
     curl http://SERVER:PORT/xmlqstat/jobinfo?JOBID</pre>
  <b>NB:</b> Under some circumstances &ndash; notably when executing
  <code>"qstat -xml -j *"</code> with a query to the second GridEngine
  cluster installation &ndash; the CommandGenerator method locks up when
  calling the qstat command. The source of the problem is not readily
  evident, but the CGI script doesn't seem to exhibit this misbehaviour.
</li>
<li>
  The <b>xmlqstat-cacher.pl</b> is <em>only</em> required if you are not
  using the <em>CommandGenerator</em> or not caching information via the
  <em>qlicerver</em> (FlexLM + GridEngine integration).

  This Perl daemon script periodically refreshes the cached GridEngine XML
  status data. This cached data is what cocoon uses to generate various
  views and interfaces. The default setting for this daemon is to refresh
  data every 30 seconds (this value is user configurable). The Perl
  daemon is used so that Cocoon does not call "qstat -f -xml" every time a
  user hits the web page. The caching mechanism greatly reduces the load on
  the SGE qmaster and the Cocoon application server.
</li>
<li>
  The <b>create-threshold-config.pl</b> is <em>optional</em>
  and is a helper script that can query GridEngine to determine the
  configured load alarm thresholds for each queue.
  Since GridEngine only reports current load values
  (and not the configured alarm thresholds) this helper script can create
  a secondary configuration file that is read by Cocoon to generate
  customized graphical "load ratio" reports within the web interface.
</li>
</ol>
The <b>init-scripts/</b> directory contains a few roughed out
initialization scripts for the various applications.

<br/><br/>
The <b>xmlqstat/</b> directory is where this application lives.
It is organized into the following sub-directories:
<pre>

$ ls -l xmlqstat/
drwxr-xr-x   config/
drwxr-xr-x   css/
drwxr-xr-x   images/
drwxr-xr-x   javascript/
-rw-r--r--   sitemap.xmap
drwxr-xr-x   xml/
drwxr-xr-x   xsl/
</pre>

The <b>config/</b> directory contains user-customizable configuration files.
<br/>
The <b>css/</b> directory contains CSS stylesheets used for seperation of
content from presentation.
<br/>
The <b>image/</b> directory contains images, icons and graphic elements.
<br/>
The <b>javascript/</b> directory contains javascript used for presentation and
display preference formatting.
<br/>
The <b>sitemap.xmap</b> is a Cocoon configuration file that tells the
application server how to handle, route and process various transformation
requests.
<br/>
The <b>xml/</b> directory contains static XML source for the documentation
and help files.
<br/>
The <b>xsl/</b> directory contains the XSLT stylesheets that guide the
transformation of GridEngine XML into various output forms.
<br/><br/>

Generally speaking, it should only be necessary to edit the
<b>xmlqstat/config/config.xml</b>. This file is used to set some simple
configuration preferences.

If you are using file caching (eg, with the qlicerver code), the names of the
cache directories must correspond to the cluster named. For example:
<pre>
$ ls -lF cache-*
lrwxrwxrwx   cache-cluster01 -&gt; ../../grid01/default/site/cache/
lrwxrwxrwx   cache-cluster02 -&gt; ../../grid02/default/site/cache/
</pre>
With this mechanism, it is possible to monitor several cluster installations
or cluster cells, provided that the cache contents can be directly mounted
into the file system.

If the <b>xmlqstat-cacher.pl</b> is being used instead, a single cache
directory is used:
<pre>
$ ls -lF cache/*
lrwxrwxrwx   cache/qstatf.xml -&gt; ../../grid/default/site/cache/qstatf.xml
</pre>

To monitor several cluster installations or cluster cells, the cache names
have this form:
<pre>
$ ls -lF cache/*
lrwxrwxrwx   cache/qstatf~cluster01.xml -&gt; ../../grid01/default/site/cache/qstatf.xml
lrwxrwxrwx   cache/qstatf~cluster02.xml -&gt; ../../grid02/default/site/cache/qstatf.xml
</pre>

In some cases, it may be necessary to edit <b>sitemap.xmap</b> to make minor
configuration changes. For example, to select alternative input sources
(cached or from <em>CommandGenerator</em>).

]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Installation</sectionHead>
<para><![CDATA[
Installation Process:
<ol>
<li>
  Make sure you have Perl and Java available and that the $JAVA_HOME
  environment variable is set.
</li>
<li>
  Create a directory to hold the misc. components (something like xml-qstat/)
</li>
<li>
  Download <a href="http://cocoon.apache.org/2.1/">Apache Cocoon</a> version
  2.1.8 or later. Simply unpacking the distribution into the xml-qstat/
  directory (or elsewhere) and running the "build.sh" script should work fine.

  The build may take several minutes and when it completes you will have a
  script called "cocoon.sh" that can be run. In its default form (with 2.1.8
  or later) simply running "./cocoon.sh" as a non-privledged user will cause
  Cocoon to start up its own internal application server that binds to all
  available network interfaces and listens for incomming connections at port
  number 8888. To test, simply point your web browser at the
  <em>http://{yourServerName}:8888/</em>
  -- if it is working, you will see a Cocoon welcome screen.
  Firewall users should make sure that TCP connections to port 8888 are
  allowed.
</li>
<li>
  Download the xmlqstat.tar.gz distribution, when unpacked into the
  xml-qstat/ directory it will populate the scripts/ and xmlqstat/ directories.
</li>
<li>
  <em>optional:</em>
  Download
  <a href="http://www.floodgap.com/httpi/">httpi</a> &ndash;
  into the xml-qstat/ directory or elsewhere.
  <br/>
  NB: This is only necessary if you want to use CGI
  scripts and/or do not wish to use the <em>CommandGenerator</em> for
  querying job details.
</li>
<li>
  Create the <b>mount-table.xml</b> configuration file in the cocoon
  directory (details are below).
</li>
<li>
  Edit the <b>xmlqstat/config/config.xml</b> file to set local configuration
  parameters (details are below)
</li>
<li>
  <em>optional:</em>
  NB: This is only required if you are not using the <em>CommandGenerator</em>
  and are not caching qstat information with the <em>qlicerver</em>
  <ol>
  <li>
    Edit the <b>scripts/xmlqstat-cacher.pl</b> script to configure the full
    Unix file path to where cached SGE status data will be stored. If data is
    cached to a file named "cached-sge-data.xml" within the xmlqstat/xml/
    directory then <b>xmlqstat/sitemap.xmap</b> can be left unchanged. If the
    cached data is stored elsewhere, the <b>sitemap.xmap</b> file located in
    xmlqstat/ will have to be edited in several locations to let cocoon know
    where the raw XML source resides.
  </li>
  <li>
    Start caching grid data! If your SGE environment has been set up (you can
    run 'qstat' via the command line) then starting the Perl caching daemon
    should be as simple as entering the scripts/ directory and issuing the
    command "./xmlqstat-cacher.pl -d". To stop the daemon, issue the command
    "./xmlqstat-cacher.pl -k". To verify that the daemon is working, check the
    process table to see if it exists and then monitor the timestamps on the
    cache file. In its default setting, XML data should be updated every 30
    seconds.
  </li>
  </ol>
</li>
<li>
  The web interface should be ready for testing.
  Point a web browser at the URL
  <em>http://{yourServerName}:8888/xmlqstat/</em>
</li>
</ol>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Caveat</sectionHead>
<para><![CDATA[
<ul>
<li>
  The command-line syntax of the <b>xmlqstat-cacher.pl</b> daemon has
  changed from previous versions.
  Now <b>delay=...</b> and <b>timeout=...</b> command-line parameters are
  used.  This change improves flexibility and corresponds to the
  current syntax used by the <b>qlicerver</b> FlexLM integration.
</li>
<li>
  As of 2008-04-14, the CommandGenerator still does not appear to
  be caching as required and desired.
  The <b>xmlqstat-cacher.pl</b> daemon should be used instead.
</li>
<li>
  The transformations have been tested with GridEngine 6.1, no promises
  are made about its functionality with older versions.
</li>
</ul>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Advanced Installation: Cocoon behind Apache Proxies</sectionHead>
<para><![CDATA[
Many Unix servers already have an Apache webserver running on on the system.
If you have administrative access to this server you can proxy the Cocoon
application server behind Apache. The primary benefit is removing the
browser requirement to connect to TCP port 8888. The URL changes from
<em>http://{yourServerName}:8888/xmlqstat/XXX</em> to
<em>http://{yourServerName}/xmlqstat/XXX</em>.
This also allows firewall administrators to seal port 8888 closed against
all connections not coming from the apache server. The Apache configuration
directives to do this would be:

<pre>
  ## Let Apache proxy connections to cocoon on port 8888 forward and reverse...
  ProxyPass /xmlqstat http://127.0.0.1:8888/xmlqstat
  ProxyPassReverse /xmlqstat http://127.0.0.1:8888/xmlqstat
</pre>
]]>
</para>
</section>


<!-- section -->
<section>
<sectionHead>Creating mount-table.xml</sectionHead>
<para><![CDATA[
Within the <b>cocoon</b> directory it is possible to create a file called
<b>mount-table.xml</b>. The purpose of this file is to allow webapp
directories to exist elsewhere on the system rather than forcing them to be
installed inside the cocoon/ directory itself. If your file layout matches
the example:
<pre>

$ ls -l /opt/xml-qstat/
drwxr-xr-x    cocoon/
drwxr-xr-x    httpi/
drwxr-xr-x    init-scripts/
drwxr-xr-x    scripts/
drwxr-xr-x    xmlqstat/
</pre>
Then you would simply create a file called <b>cocoon/mount-table.xml</b>
with contents that looked like this:
<pre>

  &lt;mount-table&gt;

    &lt;!-- Map the browser URI "/xmlqstat" to our webapp directory --&gt;
    &lt;mount uri-prefix="xmlqstat/" src="../../../xmlqstat/sitemap.xmap"/&gt;

  &lt;/mount-table&gt;
</pre>
After creating this file, it will be necessary to stop and restart Cocoon if
it was running previously. Once cocoon is restarted, the application server
will know how to find the xmlqstat/ application files when web clients
request the URI-prefix of "/xmlqstat".
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Customizing config.xml</sectionHead>
<para><![CDATA[
Within the <b>xmlqstat/config/</b> directory there is a file called
<b>config.xml</b> that needs to be edited to reflect the local site
installation. The file is well documented internally so it should be a
simple process to edit. The following configuration questions are asked:
<ol>
<li>
  <b>UTC_TZ_offset</b>.
  This is <em>only</em> used for <b>Atom 1.0 Feeds</b> which mandate
  <a href="http://www.faqs.org/rfcs/rfc3339.html">RFC-3339</a> formatted
  timestamps. Configuring this value allows the user to adjust for local
  timezones. The RFC3339 timestamp uses UTC time which can be offset to
  match a local timezone.
</li>
<li>
  <b>qlicserver</b>
  <em>yes|no</em>.
  Specify if the cached output from the qlicserver (FlexLM license integration)
  is available.
</li>
<li>
  <b>useJavaScript</b>
  <em>yes|no</em>.
  Specify if JavaScript should be enabled.
</li>
<li>
  <b>programs/jobinfo</b>
  <em>optional</em>.
  Specify a program that can be used to query the GridEngine for job details.
</li>
<li>
  <b>programs/viewfile</b>
  <em>optional</em>.
  Specify a program that can be used to view the GridEngine job output files.
</li>
<li>
  <b>programs/viewlog</b>
  <em>optional</em>.
  Specify a program that can be used to find and view the log files.
  This could also be used to specify some other form of log file or runtime
  data analysis with graphics, etc.
</li>
</ol>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Unintended Benefits</sectionHead>
<para><![CDATA[
During development of this project, I was able to find and document three
unique cases where GridEngine does not produce well-formed XML.
The three problems are documented in 2 bug reports I have filed with the
developers:
<ul>
<li><a href="http://gridengine.sunsource.net/issues/show_bug.cgi?id=1949">http://gridengine.sunsource.net/issues/show_bug.cgi?id=1949</a></li>
<li><a href="http://gridengine.sunsource.net/issues/show_bug.cgi?id=1957">http://gridengine.sunsource.net/issues/show_bug.cgi?id=1957</a></li>
<li><a href="http://gridengine.sunsource.net/issues/show_bug.cgi?id=2515">http://gridengine.sunsource.net/issues/show_bug.cgi?id=2515</a></li>
</ul>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Feature Highlights</sectionHead>
<para><![CDATA[
A basic overview of some of the built-in features:
<ul>
<li>Automatic detection of unsupported browser types</li>
<li>Valid Atom 1.0 syndication feed</li>
<li>XSL driven documentation framework</li>
<li>
  Browser cookies used for persistent user display preferences. Views are
  dynamically rendered according to cookie values.
</li>
<li>
  Three primary views: Job listing (user or all jobs), queue instance
  listing or summary.
</li>
</ul>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Discussion List</sectionHead>
<para><![CDATA[
A mailing list has been set up for xml-qstat discussion. More information about
the list including instructions on how to join or access the list archives can
be found online at
<a href="http://bioteam.net/mailman/listinfo/xml-qstat-d">http://bioteam.net/mailman/listinfo/xml-qstat-d</a>
]]></para>
</section>


<!-- section -->
<section>
<sectionHead>Resources</sectionHead>
<para><![CDATA[
It turns out that getting at GridEngine XML and pulling out the data one is
interested in is actually pretty easy. The hardest part of this project is
actually the web design and interface aspects. The following references were
invaluable during the course of initial experiments and the eventual code:
<ul>
  <li><b>&quot;Learning XSLT&quot; by Michael Fitzgerald, 2nd ed. (2004), O'Reilly</b></li>
  <li>&quot;Javascript &amp; DHTML Cookbook&quot; by Danny Goodman, 1st ed (2003), O'Reilly</li>
  <li>&quot;Javascript Bible&quot; by Danny Goodman with Michael Morrison, 5th ed. (2003), Wiley</li>
  <li>&quot;Web Designers Reference: An integrated approach to web design with XHTML and CSS&quot; by Craig Grannel, 2005, friendsof</li>

  <li>&quot;Eric Meyer on CSS: Mastering the language of web design&quot; by Eric Meyer, 2003, New Riders Publishing</li>
  <li>&quot;More Eric Meyer on CSS&quot;, by Eric Meyer, 2004, New Riders Publishing</li>
</ul>
<br/><br/>
I've also started a wiki page here that will serve to document SGE XML internals:<br/>
<a href="http://wiki.gridengine.info/wiki/index.php/GridEngine_XML">http://wiki.gridengine.info/wiki/index.php/GridEngine_XML</a>

]]></para>
</section>

</content>

