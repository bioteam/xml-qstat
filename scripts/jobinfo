#!/usr/bin/perl -w
use strict;

# CUSTOMIZE THESE SETTINGS TO MATCH YOUR REQUIREMENTS:
my %config = (
    SGE_ROOT => "/opt/grid",
    SGE_CELL => "default",
);

# -----------------------------------------------------------------------------
#
# jobinfo cgi script
#
# This is a simple CGI that should function under Apache webservers and the
# It gets raw XML data about job status ("qstat -xml -j <jobID>") that we
# can feed to Cocoon for XSLT processing.
#
# To get it working:
# ------------------
# 1. Adjust the SGE_ROOT, SGE_CELL environment settings to match your system,
#    or pass them on the parameter list
# 2. Install the script in a cgi-bin directory somewhere on your webserver
# 3. Edit the sitemap.xmap file to insert the proper URL that points to this CGI
#    the line you will want to edit will contain this string:
#    'http://{request:serverName}:8080/xmlqstat/xmldata/jobinfo?{request:queryString}'
#
#    Just replace that URL with one that works on your system
#
# Note:
# -----
#   The principal advantages of using this script instead of the java
#   command generator:
#     - it can deal with empty query strings and use that to display details
#       for all jobs rather than just the scheduler messages
#     - any input errors yield XML with 'cgi_error'
#     - it removes empty elements that occur if an incorrect jobId is queried
#
#   Using the httpi webserver (http://www.floodgap.com/httpi) as the second
#   webserver has a minimal overhead and provides a very convenient means
#   of dynamically generating other non-XML content.
#
# -----------------------------------------------------------------------------
# boilerplate for hand-rolled cgi scripts

# simple error handling
sub error {
    print qq{<?xml version="1.0"?>\n};
    print qq{<cgi_error>@_</cgi_error>\n};
    exit 1;
}

# parameter checking: '&' is the normal separator, but split on '&amp;' too
# pander to calling directly from the command-line as well (no QUERY_STRING)
my @params = grep { defined and length } split /\&(?:amp;)?/,
  ( $ENV{QUERY_STRING} || '' );

# place named parameters in %param and unnamed parameters in %switch
# place raw numbers in @jobIds
my ( %param, %switch, @jobIds );

for (@params) {
    s{%([\dA-Fa-f]{2})}{chr hex $1}eg;    ## decode chars, eg %20 -> space etc
    s{[*?&<>{}\[\]\\\`]}{}g;              ## remove meta-chars

    if (/=/) {
        my ( $k, $v ) = split /=/;
        $v =~ s{^,+|,+$}{}g;              ## remove leading/trailing commas
        $param{$k} = $v;
    }
    elsif ( /^\d+$/ ) {
        push @jobIds, $_;
    }
    else {
        $switch{$_}++;
    }
}

#
# GridEngine environment from params, env or config
#
for (qw( SGE_ROOT SGE_CELL )) {
    if ( exists $param{$_} ) {
        $ENV{$_} = $param{$_};
    }
    else {
        $ENV{$_} ||= $config{$_};
    }
}

# finalize GridEngine environment, call directly (don't adjust path)
my @qstat;
{
    chomp( my $arch = $ENV{SGE_ARCH} || qx{$ENV{SGE_ROOT}/util/arch} || '' );
    my $bin = "$ENV{SGE_ROOT}/bin/$arch";

    # no LD_LIBRARY_PATH adjustment needed on Linux/Solaris
    @qstat = ( "$bin/qstat", "-xml", "-j" );

    -d $bin and -x $qstat[0]
      or error "qstat not found: $qstat[0]";
}

# -----------------------------------------------------------------------------

#
# the job= parameter has precedence
# restrict to alphanumeric input (jobNumber or jobName)
#
if ( exists $param{job} ) {
    @jobIds = grep { defined and /^(\w+)$/ } split /, /, $param{job};
}

# treat an empty query parameter as '*'
# this wildcard is not as dangerous as it may appear
# - we are calling qstat directly without using the shell
#
@jobIds or @jobIds = '*';

push @qstat, join( "," => @jobIds );

{
    local *PIPE;
    if ( open PIPE, '-|', @qstat ) {    # open without shell
        while (<PIPE>) {
            s{</?>}{}g;                 # a bad jobId yields empty elements!
            print;
        }
    }
    else {
        error "cannot qstat";
    }
}

1;

# ----------------------------------------------------------------- end-of-file
